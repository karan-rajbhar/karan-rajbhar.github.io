---
import BaseLayout from './BaseLayout.astro';
import ReadingProgressBar from '../components/ReadingProgressBar.astro';

const { frontmatter } = Astro.props;

// Calculate reading time (rough estimate: 200 words per minute)
const calculateReadingTime = (content: string) => {
  const words = content.trim().split(/\s+/).length;
  const minutes = Math.ceil(words / 200);
  return `PT${minutes}M`; // ISO 8601 duration format for structured data
};

// Get the raw content for reading time calculation
const content = await Astro.slots.render('default');
const readingTime = calculateReadingTime(content);

// Process code blocks with clean approach
const processedContent = content.replace(
  /```(\w+)?(?:\s+([^\n]+))?\n([\s\S]*?)```/g,
  (match, lang, possibleFilename, code) => {
    const language = lang || 'text';
    const cleanCode = code.trim();
    
    // Check if second part is a filename
    const isFilename = possibleFilename && /[./]/.test(possibleFilename);
    const filename = isFilename ? possibleFilename : undefined;
    
    const showHeader = language !== 'text' || filename;
    const escapedCode = cleanCode
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;');
    
    return `
      <div class="code-block">
        ${showHeader ? `
          <div class="code-header">
            <div class="code-info">
              ${filename ? `<span class="filename">${filename}</span>` : ''}
              ${language !== 'text' ? `<span class="language">${language}</span>` : ''}
            </div>
            <button class="copy-btn" data-code="${cleanCode}">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
                <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2 2v1"></path>
              </svg>
            </button>
          </div>
        ` : ''}
        <pre><code class="language-${language}">${escapedCode}</code></pre>
      </div>
    `;
  }
);
---

<BaseLayout 
  pageTitle={frontmatter.title}
  description={frontmatter.description}
  image={frontmatter.image?.url}
  type="article"
>
  <ReadingProgressBar />
  <article class="post" itemscope itemtype="https://schema.org/BlogPosting">
    <div class="post-header">
      <h1 itemprop="headline">{frontmatter.title}</h1>
      <div class="post-meta">
        <time datetime={frontmatter.pubDate.toString()} itemprop="datePublished">
          {new Date(frontmatter.pubDate).toLocaleDateString('en-us', {
            year: 'numeric',
            month: 'short',
            day: 'numeric',
          })}
        </time>
        {frontmatter.author && (
          <span class="author">
            by <span itemprop="author" itemscope itemtype="https://schema.org/Person">
              <span itemprop="name">{frontmatter.author}</span>
            </span>
          </span>
        )}
        <span class="reading-time">â€¢ {Math.ceil(content.trim().split(/\s+/).length / 200)} min read</span>
      </div>
      {frontmatter.tags && (
        <div class="post-tags" itemprop="keywords">
          {frontmatter.tags.map((tag: string) => (
            <a href={`/tags/${tag.toLowerCase()}`} class="tag" rel="tag">
              {tag}
            </a>
          ))}
        </div>
      )}
    </div>

    <div class="post-content" itemprop="articleBody">
      <Fragment set:html={processedContent} />
    </div>

    <!-- Hidden structured data -->
    <meta itemprop="url" content={Astro.url.href} />
    <meta itemprop="image" content={frontmatter.image?.url || '/og-default.png'} />
    <meta itemprop="description" content={frontmatter.description} />

    <!-- Remark42 Comments -->
    <div class="post-comments">
      <h2>Comments</h2>
      <div id="remark42"></div>
    </div>
  </article>
</BaseLayout>

<script>
  import hljs from 'highlight.js/lib/core';
  import 'highlight.js/styles/github.css'; // Light theme
  import 'highlight.js/styles/github-dark.min.css'; // Dark theme
  
  // Import languages
  import javascript from 'highlight.js/lib/languages/javascript';
  import typescript from 'highlight.js/lib/languages/typescript';
  import python from 'highlight.js/lib/languages/python';
  import bash from 'highlight.js/lib/languages/bash';
  import json from 'highlight.js/lib/languages/json';
  import yaml from 'highlight.js/lib/languages/yaml';
  import css from 'highlight.js/lib/languages/css';
  import xml from 'highlight.js/lib/languages/xml';
  import sql from 'highlight.js/lib/languages/sql';
  import ini from 'highlight.js/lib/languages/ini';

  // Register languages
  hljs.registerLanguage('javascript', javascript);
  hljs.registerLanguage('typescript', typescript);
  hljs.registerLanguage('python', python);
  hljs.registerLanguage('bash', bash);
  hljs.registerLanguage('json', json);
  hljs.registerLanguage('yaml', yaml);
  hljs.registerLanguage('css', css);
  hljs.registerLanguage('html', xml);
  hljs.registerLanguage('xml', xml);
  hljs.registerLanguage('sql', sql);
  hljs.registerLanguage('ini', ini);

  // Type declaration for REMARK42
  declare global {
    interface Window {
      REMARK42?: {
        changeTheme: (theme: 'dark' | 'light') => void;
      };
      remark_config: {
        host: string;
        site_id: string;
        components: string[];
        max_shown_comments: number;
        theme: 'dark' | 'light';
        url?: string;
        page_title?: string;
        locale?: string;
        show_email_subscription?: boolean;
        show_rss_subscription?: boolean;
        simple_view?: boolean;
        no_footer?: boolean;
      };
    }
  }

  // Initialize highlighting and functionality
  document.addEventListener('DOMContentLoaded', () => {
    // Apply syntax highlighting
    hljs.highlightAll();

    // Copy functionality
    document.querySelectorAll('.copy-btn').forEach(btn => {
      btn.addEventListener('click', async () => {
        const code = (btn as HTMLElement).dataset.code;
        if (!code) return;

        try {
          await navigator.clipboard.writeText(code);
          
          // Visual feedback
          const originalHTML = btn.innerHTML;
          btn.innerHTML = `
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <polyline points="20,6 9,17 4,12"></polyline>
            </svg>
          `;
          (btn as HTMLElement).style.color = '#10b981';
          
          setTimeout(() => {
            btn.innerHTML = originalHTML;
            (btn as HTMLElement).style.color = '';
          }, 2000);
        } catch (err) {
          console.error('Failed to copy:', err);
        }
      });
    });
  });

  // Remark42 initialization
  window.remark_config = {
    host: 'https://comments.dionsyus.online',
    site_id: 'karan-rajbhar-github-io',
    components: ['embed'],
    max_shown_comments: 10,
    theme: window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light',
    url: window.location.origin + window.location.pathname,
    page_title: document.title,
    locale: 'en',
    show_email_subscription: false,
    show_rss_subscription: false,
    simple_view: false,
    no_footer: false
  };

  // Load Remark42 script
  const script = document.createElement('script');
  script.src = window.remark_config.host + '/web/embed.js';
  script.defer = true;
  (document.head || document.body).appendChild(script);

  // Watch for theme changes
  document.addEventListener('DOMContentLoaded', () => {
    const updateRemark42Theme = () => {
      const isDark = document.documentElement.classList.contains('dark');
      if (window.REMARK42) {
        window.REMARK42.changeTheme(isDark ? 'dark' : 'light');
      }
    };

    // Watch for theme changes using MutationObserver
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.attributeName === 'class') {
          updateRemark42Theme();
        }
      });
    });

    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ['class']
    });

    // Initial theme setup
    updateRemark42Theme();
  });
</script>

<style>
  .post {
    max-width: var(--max-width);
    margin: 0 auto;
    padding: var(--spacing-lg) var(--spacing-md) 0;
  }

  .post-header {
    margin-bottom: var(--spacing-xl);
    text-align: center;
  }

  .post-meta {
    color: var(--text-secondary);
    font-size: var(--font-size-sm);
    margin-top: var(--spacing-sm);
  }

  .author {
    margin-left: var(--spacing-sm);
  }

  .post-content {
    line-height: 1.7;
  }

  .post-comments {
    margin-top: var(--spacing-lg);
    padding-top: var(--spacing-md);
    border-top: 1px solid var(--border-color);
    margin-bottom: 0;
  }

  .post-comments h2 {
    font-size: var(--font-size-lg);
    margin-bottom: var(--spacing-md);
    color: var(--text-primary);
  }

  .post-tags {
    margin-top: var(--spacing-md);
    display: flex;
    flex-wrap: wrap;
    gap: var(--spacing-xs);
    justify-content: center;
  }

  .tag {
    display: inline-block;
    padding: var(--spacing-xs) var(--spacing-sm);
    background: var(--bg-secondary);
    color: var(--text-secondary);
    text-decoration: none;
    border-radius: 4px;
    font-size: var(--font-size-xs);
    transition: all var(--transition-speed) ease;
  }

  .tag:hover {
    background: var(--accent-primary);
    color: var(--bg-primary);
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .post {
      padding: var(--spacing-md) var(--spacing-sm) 0;
    }
  }

  /* Code block styling */
  .code-block {
    margin: 1.5rem 0;
    border-radius: 8px;
    overflow: hidden;
    border: 1px solid #e5e7eb;
    background: #f9fafb;
    font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
  }

  .code-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem 1rem;
    background: #f3f4f6;
    border-bottom: 1px solid #e5e7eb;
    font-size: 0.875rem;
  }

  .code-info {
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }

  .filename {
    color: #374151;
    font-weight: 500;
  }

  .language {
    color: #6b7280;
    font-size: 0.75rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    padding: 0.25rem 0.5rem;
    background: #f9fafb;
    border-radius: 4px;
    border: 1px solid #e5e7eb;
  }

  .copy-btn {
    padding: 0.5rem;
    border: none;
    background: transparent;
    color: #6b7280;
    cursor: pointer;
    border-radius: 4px;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .copy-btn:hover {
    background: #e5e7eb;
    color: #374151;
  }

  .copy-btn:active {
    transform: scale(0.95);
  }

  pre {
    margin: 0 !important;
    padding: 1rem !important;
    overflow-x: auto;
    background: #f9fafb !important;
    font-size: 0.875rem !important;
    line-height: 1.6 !important;
  }

  code {
    font-family: inherit !important;
    font-size: inherit !important;
    background: none !important;
    padding: 0 !important;
    border: none !important;
  }

  /* Dark theme */
  :global(.dark) .code-block {
    border-color: #374151;
    background: #1f2937;
  }

  :global(.dark) .code-header {
    background: #111827;
    border-color: #374151;
  }

  :global(.dark) .filename {
    color: #f9fafb;
  }

  :global(.dark) .language {
    color: #9ca3af;
    background: #1f2937;
    border-color: #374151;
  }

  :global(.dark) .copy-btn {
    color: #9ca3af;
  }

  :global(.dark) .copy-btn:hover {
    background: #374151;
    color: #f9fafb;
  }

  :global(.dark) pre {
    background: #1f2937 !important;
  }

  /* Content styling */
  .post-content :global(h1) {
    display: none; /* Hide h1 in content since we show title in header */
  }

  .post-content :global(img) {
    max-width: 100%;
    height: auto;
    border-radius: 8px;
    margin: var(--spacing-lg) 0;
  }

  .post-content :global(h2) {
    margin-top: var(--spacing-xl);
  }

  .post-content :global(h3) {
    margin-top: var(--spacing-lg);
    color: var(--text-primary);
  }

  .post-content :global(ul), .post-content :global(ol) {
    margin: var(--spacing-md) 0;
    padding-left: var(--spacing-xl);
  }

  .post-content :global(li) {
    margin: var(--spacing-xs) 0;
  }

  .post-content :global(blockquote) {
    border-left: 4px solid var(--accent-primary);
    margin: var(--spacing-lg) 0;
    padding: var(--spacing-md) var(--spacing-lg);
    background: var(--bg-secondary);
    border-radius: 4px;
  }

  .post-content :global(blockquote p) {
    margin: 0;
    color: var(--text-secondary);
  }

  /* Mobile responsiveness */
  @media (max-width: 640px) {
    .code-block {
      margin: 1rem -1rem;
      border-radius: 0;
      border-left: none;
      border-right: none;
    }

    .code-header {
      padding: 0.5rem 1rem;
    }

    pre {
      padding: 0.75rem 1rem !important;
      font-size: 0.8rem !important;
    }

    .filename {
      font-size: 0.8rem;
    }

    .post-content :global(img) {
      margin: var(--spacing-md) 0;
    }

    .post-content :global(h2) {
      margin-top: var(--spacing-lg);
    }

    .post-content :global(h3) {
      margin-top: var(--spacing-md);
    }
  }
</style>