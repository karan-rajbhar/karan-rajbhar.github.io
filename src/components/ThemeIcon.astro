---
---
<button id="themeToggle" class="theme-toggle" aria-label="Toggle theme">
  <div class="toggle-track">
    <div class="toggle-indicator">
      <!-- Day icons -->
      <div class="day-icon">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <circle cx="12" cy="12" r="4"></circle>
          <path d="M12 2v2"></path>
          <path d="M12 20v2"></path>
          <path d="m4.93 4.93 1.41 1.41"></path>
          <path d="m17.66 17.66 1.41 1.41"></path>
          <path d="M2 12h2"></path>
          <path d="M20 12h2"></path>
          <path d="m6.34 17.66-1.41 1.41"></path>
          <path d="m19.07 4.93-1.41 1.41"></path>
        </svg>
      </div>
      <!-- Night icons -->
      <div class="night-icon">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z"></path>
          <path d="M19 3v4"></path>
          <path d="M21 5h-4"></path>
        </svg>
      </div>
    </div>
  </div>
</button>

<style>
  .theme-toggle {
    --toggle-size: 50px;
    --toggle-padding: 3px;
    --toggle-width: calc(var(--toggle-size) * 2);
    --toggle-height: var(--toggle-size);
    
    position: relative;
    width: var(--toggle-width);
    height: var(--toggle-height);
    background: transparent;
    border: none;
    border-radius: 50px;
    cursor: pointer;
    padding: 0;
    overflow: hidden;
    -webkit-tap-highlight-color: transparent;
  }

  .toggle-track {
    position: relative;
    background: linear-gradient(to right, #3b82f6, #10b981);
    border-radius: 50px;
    height: 100%;
    width: 100%;
    transition: all 0.3s ease;
    box-shadow: inset 0 2px 4px rgba(0,0,0,0.2);
  }

  :global(.dark) .toggle-track {
    background: linear-gradient(to right, #1e293b, #0f172a);
  }

  .toggle-indicator {
    position: absolute;
    top: var(--toggle-padding);
    left: var(--toggle-padding);
    width: calc(var(--toggle-height) - 2 * var(--toggle-padding));
    height: calc(var(--toggle-height) - 2 * var(--toggle-padding));
    background: #fff;
    border-radius: 50%;
    transform: translateX(0);
    transition: all 0.5s cubic-bezier(0.2, 0.85, 0.32, 1.2);
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
  }

  :global(.dark) .toggle-indicator {
    transform: translateX(calc(var(--toggle-size)));
    background: #1a1a1a;
  }

  .day-icon,
  .night-icon {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 16px;
    height: 16px;
    transition: all 0.5s ease;
  }

  .day-icon {
    color: #f59e0b;
    opacity: 1;
  }

  .night-icon {
    color: #e2e8f0;
    opacity: 0;
    transform: translate(-50%, -50%) rotate(-90deg);
  }

  :global(.dark) .day-icon {
    opacity: 0;
    transform: translate(-50%, -50%) rotate(90deg);
  }

  :global(.dark) .night-icon {
    opacity: 1;
    transform: translate(-50%, -50%) rotate(0);
  }

  /* Stars animation for dark mode */
  .toggle-track::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    border-radius: 50px;
    background-image: radial-gradient(white 1px, transparent 1px);
    background-size: 8px 8px;
    opacity: 0;
    transition: opacity 0.5s ease;
  }

  :global(.dark) .toggle-track::after {
    opacity: 0.2;
  }

  /* Focus styles */
  .theme-toggle:focus-visible {
    outline: 2px solid var(--accent-primary);
    outline-offset: 2px;
  }

  /* Hover effect */
  .theme-toggle:hover .toggle-track {
    box-shadow: inset 0 2px 4px rgba(0,0,0,0.3);
  }

  .theme-toggle:hover .toggle-indicator {
    box-shadow: 0 4px 8px rgba(0,0,0,0.3);
  }

  /* Mobile styles */
  @media (max-width: 600px) {
    .theme-toggle {
      --toggle-size: 40px;
    }
  }

  /* Disable hover effects on touch devices */
  @media (hover: none) {
    .theme-toggle:hover .toggle-track,
    .theme-toggle:hover .toggle-indicator {
      box-shadow: none;
    }
  }
</style>

<script is:inline>
  const theme = (() => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme');
    }
    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
      return 'dark';
    }
    return 'light';
  })();

  if (theme === 'light') {
    document.documentElement.classList.remove('dark');
  } else {
    document.documentElement.classList.add('dark');
  }

  window.localStorage.setItem('theme', theme);

  const handleToggleClick = () => {
    const element = document.documentElement;
    element.classList.toggle("dark");

    const isDark = element.classList.contains("dark");
    localStorage.setItem("theme", isDark ? "dark" : "light");
  }

  document.getElementById("themeToggle").addEventListener("click", handleToggleClick);
</script>