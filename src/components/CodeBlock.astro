---
import 'prism-themes/themes/prism-vsc-dark-plus.css';
import 'prismjs/plugins/line-numbers/prism-line-numbers.css';
import 'prismjs/plugins/toolbar/prism-toolbar.css';

interface Props {
  code: string;
  language?: string;
  filename?: string;
  showLineNumbers?: boolean;
}

const { 
  code, 
  language = "plaintext",
  filename,
  showLineNumbers = true 
} = Astro.props;

// Clean up the code by removing extra newlines at start/end
const cleanCode = code.trim();
---

<div class="code-block-wrapper">
  <div class="code-header">
    <div class="header-content">
      <span class="language-tag">{language}</span>
      {filename && <span class="filename">{filename}</span>}
    </div>
    <button class="copy-button" aria-label="Copy code" title="Copy code">
      <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
        <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
      </svg>
      <span class="copy-text">Copy</span>
    </button>
  </div>
  <div class="code-content">
    <pre class={`language-${language} ${showLineNumbers ? 'line-numbers' : ''}`}><code class={`language-${language}`}>{cleanCode}</code></pre>
  </div>
</div>

<style>
  .code-block-wrapper {
    position: relative;
    margin: var(--spacing-lg) 0;
    border-radius: 12px;
    overflow: hidden;
    background: var(--code-bg);
    border: 1px solid var(--code-border);
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
    transition: all var(--transition-speed) ease;
  }

  .code-block-wrapper:hover {
    border-color: var(--accent-primary);
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
  }

  .code-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--spacing-sm) var(--spacing-md);
    background: var(--code-header-bg);
    border-bottom: 1px solid var(--code-border);
    font-family: var(--font-mono);
    min-height: 44px;
  }

  .header-content {
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
  }

  .language-tag {
    font-size: var(--font-size-xs);
    color: var(--accent-primary);
    background: var(--code-bg);
    padding: 4px 8px;
    border-radius: 4px;
    text-transform: uppercase;
    font-weight: 600;
    letter-spacing: 0.5px;
  }

  .filename {
    font-size: var(--font-size-sm);
    color: var(--text-secondary);
    opacity: 0.9;
  }

  .copy-button {
    display: flex;
    align-items: center;
    gap: var(--spacing-xs);
    padding: var(--spacing-xs) var(--spacing-sm);
    border: 1px solid var(--code-border);
    border-radius: 6px;
    background: var(--code-bg);
    color: var(--text-secondary);
    font-size: var(--font-size-xs);
    font-weight: 500;
    cursor: pointer;
    transition: all var(--transition-speed) ease;
    opacity: 0.9;
    position: relative;
    z-index: 10;
  }

  .copy-button:hover {
    background: var(--accent-primary);
    border-color: var(--accent-primary);
    color: var(--bg-secondary);
    opacity: 1;
    transform: translateY(-1px);
  }

  .copy-button:focus {
    outline: none;
    border-color: var(--accent-primary);
    box-shadow: 0 0 0 3px var(--accent-primary-alpha);
    opacity: 1;
  }

  .copy-button svg {
    width: 14px;
    height: 14px;
    transition: all var(--transition-speed) ease;
  }

  .copy-button:hover svg {
    transform: scale(1.1);
    color: var(--bg-secondary);
  }

  .code-content {
    position: relative;
    overflow-x: auto;
  }

  pre {
    margin: 0 !important;
    padding: var(--spacing-md) !important;
    background: var(--code-bg) !important;
    font-family: var(--font-mono) !important;
    font-size: var(--font-size-sm) !important;
    line-height: 1.7 !important;
  }

  code {
    font-family: var(--font-mono) !important;
    font-size: var(--font-size-sm) !important;
    background: transparent !important;
    border: none !important;
    box-shadow: none !important;
    margin: 0 !important;
    padding: 0 !important;
    color: var(--code-text) !important;
  }

  /* Syntax highlighting */
  :global(.token.comment),
  :global(.token.prolog),
  :global(.token.doctype),
  :global(.token.cdata) {
    color: var(--syntax-comment) !important;
  }

  :global(.token.keyword),
  :global(.token.property),
  :global(.token.tag),
  :global(.token.boolean),
  :global(.token.constant) {
    color: var(--syntax-keyword) !important;
  }

  :global(.token.string),
  :global(.token.char),
  :global(.token.attr-value) {
    color: var(--syntax-string) !important;
  }

  :global(.token.number),
  :global(.token.regex) {
    color: var(--syntax-number) !important;
  }

  :global(.token.function),
  :global(.token.builtin) {
    color: var(--syntax-function) !important;
  }

  :global(.token.operator),
  :global(.token.entity),
  :global(.token.url),
  :global(.token.variable) {
    color: var(--syntax-operator) !important;
  }

  :global(.token.selector),
  :global(.token.attr-name),
  :global(.token.class-name) {
    color: var(--syntax-class) !important;
  }

  :global(.token.important),
  :global(.token.atrule) {
    color: var(--syntax-keyword) !important;
    font-weight: bold !important;
  }

  /* Line numbers styling */
  :global(.line-numbers .line-numbers-rows) {
    border-right: 1px solid var(--code-border) !important;
    padding-right: var(--spacing-md) !important;
    opacity: 0.7;
  }

  :global(.line-numbers-rows > span::before) {
    color: var(--code-line-number) !important;
    padding-right: var(--spacing-sm) !important;
  }

  /* Dark theme specific adjustments */
  :global(.dark) .code-block-wrapper {
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
  }

  :global(.dark) .code-block-wrapper:hover {
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.3);
  }

  :global(.dark) .language-tag {
    background: rgba(255, 255, 255, 0.1);
  }

  :global(.dark) .copy-button {
    background: rgba(255, 255, 255, 0.05);
    border-color: rgba(255, 255, 255, 0.1);
  }

  :global(.dark) .copy-button:hover {
    background: var(--accent-primary);
    border-color: var(--accent-primary);
    color: var(--bg-primary);
  }

  @media (max-width: 600px) {
    .code-header {
      padding: var(--spacing-xs) var(--spacing-sm);
      min-height: 40px;
    }

    pre {
      font-size: var(--font-size-xs) !important;
      padding: var(--spacing-sm) !important;
      line-height: 1.6 !important;
    }

    .copy-button {
      padding: var(--spacing-xs) var(--spacing-sm);
    }
    
    .copy-text {
      display: none;
    }

    .language-tag {
      font-size: 11px;
      padding: 3px 6px;
    }

    .filename {
      font-size: var(--font-size-xs);
    }

    :global(.line-numbers-rows > span::before) {
      padding-right: var(--spacing-xs) !important;
    }
  }
</style>

<script>
  // Initialize Prism
  import Prism from 'prismjs';
  import 'prismjs/components/prism-bash';
  import 'prismjs/components/prism-javascript';
  import 'prismjs/components/prism-typescript';
  import 'prismjs/components/prism-jsx';
  import 'prismjs/components/prism-tsx';
  import 'prismjs/components/prism-yaml';
  import 'prismjs/components/prism-json';
  import 'prismjs/components/prism-markdown';
  import 'prismjs/components/prism-python';
  import 'prismjs/components/prism-ruby';
  import 'prismjs/components/prism-java';
  import 'prismjs/components/prism-go';
  import 'prismjs/components/prism-rust';
  import 'prismjs/components/prism-sql';
  import 'prismjs/components/prism-ini';
  import 'prismjs/components/prism-docker';
  import 'prismjs/plugins/line-numbers/prism-line-numbers';

  // Initialize Prism
  Prism.highlightAll();

  // Copy functionality
  document.querySelectorAll('.copy-button').forEach(button => {
    button.addEventListener('click', async () => {
      const pre = button.closest('.code-block-wrapper')?.querySelector('pre');
      if (!pre) return;

      try {
        const code = pre.textContent || '';
        await navigator.clipboard.writeText(code);

        const span = button.querySelector('.copy-text');
        if (!span) return;

        const originalText = span.textContent;
        span.textContent = 'Copied!';
        
        const htmlButton = button as HTMLElement;
        htmlButton.style.color = 'var(--success-color)';
        htmlButton.style.borderColor = 'var(--success-color)';

        setTimeout(() => {
          span.textContent = originalText;
          htmlButton.style.color = '';
          htmlButton.style.borderColor = '';
        }, 2000);
      } catch (err) {
        console.error('Failed to copy:', err);
      }
    });
  });
</script> 